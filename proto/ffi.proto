// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "proto/ebpf.proto";

package ebpf_fuzzer;

message ExecutionRequest {
  // Program file descriptor to execute.
  int64 prog_fd = 1;

  // Optional data to send over the network that can be accessed by the
  // ebpf program.
  bytes input_data = 3;
}

message CbpfExecutionRequest {
  // Program pair sockets
  int64 socket_write = 1;
  int64 socket_read = 2;

  // Optional data to send over the network that can be accessed by the
  // cbpf program.
  bytes input_data = 3;
}

// Results from Executing the ebpf program.
message ExecutionResult {
  bool did_succeed = 1;
  string error_message = 2;
  bytes output_data = 3;
}

// Result from get_map_elements call, retrieves all the elements in a bpf map.
message MapElements {
  repeated uint64 elements = 1;
  string error_message = 2;
}

// Results From feeding the program into a ebpf executor.
message ValidationResult {
  bool is_valid = 1;
  string verifier_log = 2;
  int64 program_fd = 3;
  string bpf_error = 4;
  bool did_collect_coverage = 5;
  int64 coverage_size = 6;
  int64 coverage_buffer = 7;
  repeated uint64 coverage_address = 8;
  int64 socket_write = 9;  // cbpf only
  int64 socket_read = 10;  // cbpf only
  uint64 fd_array_addr = 11;
}

message EncodedProgram {
  // Array of bytes with the encoded eBPF instructions
  bytes program = 1;
  // Array of bytes with encoded BTF
  bytes btf = 2;
  // Array of bytes with the encoded function info for the program's functions
  bytes function = 3;

  repeated ebpf.EbpfMap maps = 4;
}
